1. Download/Install Node.js:
        https://nodejs.org/en/

2. If you're using vscode the first extension you want to install is 'Prettier".

3. You should also install the 'Python' extension.

4. Next install the 'Django' extension.

5. Then we want the 'React' extension:
        ES7 React/Redux/GraphQL/React-Native snippets

6. As well as install the 'Javascript' extension.
        Javascript (ES6)

7. Create your virtual environment:
        conda create --name music_controller python=3

8. Activate the environment:
        source activate music_controller

9. Create a new github repository and initialize it locally.

10. Install django and djangorestframework through conda:
        conda install django
        conda install djangorestframework

11. To see what git branch you're on run:
        git status

12. List All Branches:
        To see local branches run:
                git branch
        To see remote branches run:
                git branch -r
        To see all local and remote branches run:
                git branch -a
13. To create a new branch run:
        git checkout -b my-branch-name

14. To get a list of all branches from the remote run:
        git pull

15. To switch to that branch run:
        git checkout --track origin/my-branch-name

16. Push to a branch:
        If your local branch does not exist on the remote, run:
                git push - origin my-branch-name
                or
                git push -u origin HEAD

17. The first thing we want to do is to start a project:
        django-admin startproject music_app

18. We want to make sure we are in our project directory, so cd into it:
        cd music_controller

19. Then we want to create an app:
        django-admin startapp api

20. We then need to add our api to the 'INSTALLED_APPS' list in our settings.py

21. Let's also add our rest framework into our installed apps.

22. Now let's create our first view by going to our views.py in our api app.

23. After we create our requests function we're goin to want to create our URLs and we do that
    by creating our urls.py in our api app folder.
        touch api/urls.py

24. Since we'll be using our urls.py file lets split the page so we can see both files at the 
    same time.

25. Let's then start working with our urls.py in the music_app
    project folder.

26. Let's make our migrations:
        python manage.py makemigrations
    What this is doing is creating a database to store our current changes    

27. Then migrate:
        python manage.py migrate
    This adds the db.sqlite3 file which manages the database for our application

28. Test the server:
        python manage.py runserver

29. Let's get started with our model then look at our api endpoint.

30. The basic rule in django is that we want to have FAT models and THIN views. Which means 
    put most of your logic on your models.    

31. Since we modified our model, we need to makemigrations again:
        python manage.py makemigrations

32. To see all of your conda environments run:
	conda info --envs

32. In order for our fronted to access specific rooms we need to create a serializer class:
        touch api/serializers.py
    What a serializer does is it translates our model into a json response.    

33. Now we want to creat an api view with a list of all the different rooms.

34. Now we need to link our url to our view.

35. It's now time to add react. First we need to make sure npm is installed
        npm
    If the command works you have it installed.

36. Create a new app for our frontend:
        django-admin startapp frontend
    This app is going to be related to react aspect of our project.

37. Next thing we need to do is cd into the new app and create a static, 
    source, template folder:
        cd frontend
        mkdir templates
        mkdir static
    This folder holds anything the browser caches. You then want to add more subfolder in static:
                cd static
                mkdir frontend
                mkdir css
                mkdir images
**if you want to skip the autosuggestion use: CTRL + 'enter'
or if you want to completely turn off the setting: "editor.acceptSuggestionOnEnter": "off"

38. Make another folder in frontend called 'src' and in that folder make another folder
    called 'components'

39. Now we need to initialize an npm project:
        npm init -y
    This creates everything we need for our fronted project.    

40. Install all the packages we need with npm starting with webpack:
        npm i webpack webpack-cli --save-dev

41. The next package we need is bable:
        npm i @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev
    What this does is allow us to run our javascript in older browsers.    

42. Next let's install react:
        npm i react react-dom --save-dev

43. Next install material-ui which is prebuild components so we don't have to style the webpage ourselves:
        npm install @material-ui/core

44. Next is installing another thing for babel:
        npm install @babel/plugin-proposal-class-properties
    This is so that we can use async and await in our javascript.     

45. Next is something to reroute our pages:
        npm install react-router-dom

46. The next thing is for material-ui:
        npm install @material-ui/icons

47. Next thing to do is set up configuration scripts to run our webpack and babel.
    Start by creating a new file in the frontend app called 'babel.config.json'. 

48. In this file we want to setup the babel loaders.

49. Next create a new javascript file in frontend called 'webpack.config.js'.

50. Now go to the package.json file and add a new script to run webpack and start by removing:
        "test": "echo \"Error: no test specified\" && exit 1"

51. Then add:
        "dev": "webpack --mode prodution --watch"
    This tells us to run webpack in production mode whenever we run our python server.  
        "build": "webpack --mode production"

52. Next make another javascript file in the src folder:
        index.js

53. Now we need to make it so that our django app that react will take control of. Start by creating
    a new folder in templates called 'frontend' then create a file in fronted called 'index.html'.    

54. Now we need to go into the views.py in our frontend and render our index template and let
    react take care of it.

55. Create a urls.py file in the frontend app.

56. Then go to the urls in the music_app folder and configure that.

57. Create a new component called 'App.js'.

58. Now we want to render the component that we've just made and render it in index.html.

59. Make create a new file in src called 'index.js'.

60. Now we want to test our server and run the script in the package.json file which should look
    at the index.js file, import the App and bundle the code, output something to static/frontend
    and execute the file main.js. Start by changing the directory into the frontend app and run:
        npm run dev
    This is the script that we added in package.json.    

70. Add the frontend app to the installed apps.

71. Now let's add styling. Start by adding a css file to the frontend:
        touch frontend/static/css/index.css

72. Next start adding things to App.js.

73. Make a new javascript file in components called:
        HomePage.js

74. Create a room page and create room page in the components:
        RoomJoinPage.js
        CreateRoomPage.js

75. Let's start to create a view that can create a room for us by heading to the views.py 
    in our api app and importing a few things in order to write the view.

76. Make another serializer for this view. Make the create room view, then add that to 
    the ursls.

77. Now create the createroom page by heading to the CreateRoomPage.js file.

78. After that now you can start creating the backend logic. We're going to use react state
    to keep track of what's in our form.

79. After you define the functions to handle the state of your buttons, you want to hook
    those functions to your buttons using the onChange attribute.

80. Now we can send a post request from our frontend to our backend after we define our button functions in createroom.

81. Now we need to create a view to look at room details.

82. Start by making a new component which handles the page after we are in a room:
        Room.js

83. Now we need to set up our backend to retrieve the room info. Start by going to the views.py in api.

84. Now that we created a getroom class we need to hook it up with an endpoint.

85. Now we need to send the to our javascript to set up our room page. Start by going back to the Room.js.

86. Go to the createroompage and make it so that it directs us to the correct page.

89. Now center the create a room page so that it is centered vertically and horizontally. Go to the css file.

90. Code out the logic for the new component.

91. Now to work on the home page.

92. If the webpage isn't reloading, click on inspect and then right click on reload and click hard resest.

93. Now we need to make sure that whenever the homepage is first loaded that the components render correctly.

94. Start by creating a lifecycle method with async.

95. Work on rerouting the homepage to a room in the user is already in a Room.js

96. Work on room page. Things like leaving a room.

97. Now build out the settings tab so that the host can change the settings of the room.

98. In order to create our settings page we'll just change our state and set it so that it is either
    looking at the settings page or the room page.    

99. Need to install a new package in frontend.
        npm install @material-ui/lab

100. Creating comments in jsx fucks up code.
        {/* typography is basically just a nicely styled header from 
        material-ui */}

102. Also, while making changes to frontend, if I don't update git and add everything to the staging area, for some reason
     chrome doesn't update the changes made to the frontend and loads old code even when I hard reset the cache.   

103. Begin working on spotify API.

104.    <Grid container spacing={1}>
        {/* this item will be in the contained grid 
        xs defines the width of the grid should be when the size of it is 
        extra small, 12 is just the moximum value making the maximum
        screen width which fills the entire screen*/}
                <Grid item xs={12} align="center">

105. </Grid>
        {/* this will set the control of the playback state of our guest */}
        <Grid item xs={12} align="center">
          <FormControl component="fieldset">

106. Fixed the comments, turns out my code was just shit.

107. Now we can start using the spotify api. Go to the developer website and login:
        https://developer.spotify.com/dashboard

108. Click 'create an app'.

109. Must keep track of client id and client secret and don't share it.

110. Now create a new application that will handle all the spotify stuff:
        python manage.py startapp spotify

111. Create a urls.py file and credentials.py in the spotify app. The credentials.py file will store the client id, secret 
     and redirect uri/url.

112. Start setting up the authentication flow. Go to the views.py in spotify and create a view that can request authentication.

113. Make sure requests is installed and install it through pip or conda:
        pip install requests

114. We need to create a database that will store all the tokens for all the users that are 
     authenticated.

115. Start by going to the models.py in spotify.

116. Since we made a change to our model we need to make migrations again:
        python manage.py makemigrations
     Before you do this make sure the spotify app is added to installed apps in settings.   

117. As soon as we get access to the information we want to store it in the database/spotifytoken model.

118. Make a new python file in spotify:
        util.py

119. From the frontend we're going to call the AuthURL endpoint, then we're going to take the url that we recieve
     and redirect to that page, then from that url after the user is done authorizing us we'll redirect to
     the spotify_callback function, then from that function we'll send the request for the tokens, store the
     tokens and redirect back to our original application.

120. Now we need to write a function to check if a user is authenticated. We can do that in the util.py file.

121. We need to create a new view. The utils.py is written in python, but we need json, so our frontend can understand.

122. Now go to the frontend and configure that. As soon as we get into a room, if we are the host, then imediately
     check to see if we are authenticated.

123. Before we test the app we need to set the REDIRECT_URI.

124. Another thing that needs to be done is configuring our settings for our project in the spotify developers
     page. Go to settings and authorize the redirect url by adding the redirect url in credentials.py to
     'Redirect URLs' then click add and save it.

125. 